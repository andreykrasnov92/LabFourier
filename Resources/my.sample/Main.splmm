namespace my.sample;

composite Main {<% my $pi = 3.14159265358979; my $power=$ARGV[0]; my $size=2**$power; %>
	type StockReportSchema = tuple< <% for (my $cnt=0; $cnt<$size; $cnt++) { %>
	    float64 vr<%=$cnt%>, float64 vi<%=$cnt%><% if ($cnt<$size-1) { %>,<% } %><% } %>
	>;
	graph
		stream<StockReportSchema> Input = FileSource() {
			param
				file: "input.dat";
				format: csv;
				ignoreExtraCSVValues: true;
		}

		stream<StockReportSchema> Inverse1 = Custom(Input) {
		    logic
		        onTuple Input: {
		            StockReportSchema srs = {<% for (my $k=0; $k<2**($power-1); $k++) { %><% my $b=$k+2**($power-1); my $c=2*$k; my $d=$c+1; %>
		        		vr<%=$k%> = Input.vr<%=$c%>,
						vi<%=$k%> = Input.vi<%=$c%>,
		        		vr<%=$b%> = Input.vr<%=$d%>,
						vi<%=$b%> = Input.vi<%=$d%><% if ($d<$size-1) { %>,<% } %><% } %>
					};
		            submit(srs, Inverse1);
		        }
		}
		<% for (my $i=2; $i<$power; $i++) { %>
		stream<StockReportSchema> Inverse<%=$i%> = Custom(Inverse<%=$i-1%>) {
		    logic
		        onTuple Inverse<%=$i-1%>: {
		            StockReportSchema srs = {<% for (my $j=0; $j<2**($i-1); $j++) { %><% for (my $k=0; $k<2**($power-$i); $k++) { %><% my $a=2**($power-$i+1)*$j+$k; my $b=$a+2**($power-$i); my $c=2*(2**($power-$i)*$j+$k); my $d=$c+1; %>
		        		vr<%=$a%> = Inverse<%=$i-1%>.vr<%=$c%>,
						vi<%=$a%> = Inverse<%=$i-1%>.vi<%=$c%>,
		        		vr<%=$b%> = Inverse<%=$i-1%>.vr<%=$d%>,
						vi<%=$b%> = Inverse<%=$i-1%>.vi<%=$d%><% if ($d<$size-1) { %>,<% } %><% } %><% } %>
					};
		            submit(srs, Inverse<%=$i%>);
		        }
		}
		<% } %>
		stream<StockReportSchema> Output1 = Custom(Inverse<%=$power-1%>) {
		    logic
		        onTuple Inverse<%=$power-1%>: {
		            StockReportSchema srs = {<% for (my $j=0; $j<2**($power-1); $j++) { %><% my $a=2*$j; my $b=$a+1; %>
		        		vr<%=$a%> = Inverse<%=$power-1%>.vr<%=$a%> + Inverse<%=$power-1%>.vr<%=$b%>,
						vi<%=$a%> = Inverse<%=$power-1%>.vi<%=$a%> + Inverse<%=$power-1%>.vi<%=$b%>,
		        		vr<%=$b%> = Inverse<%=$power-1%>.vr<%=$a%> - Inverse<%=$power-1%>.vr<%=$b%>,
						vi<%=$b%> = Inverse<%=$power-1%>.vi<%=$a%> - Inverse<%=$power-1%>.vi<%=$b%><% if ($b<$size-1) { %>,<% } %><% } %>
					};
		            submit(srs, Output1);
		        }
		}
		<% for (my $i=2; $i<=$power; $i++) { %>
		stream<StockReportSchema> Output<%=$i%> = Custom(Output<%=$i-1%>) {
		    logic
		        onTuple Output<%=$i-1%>: {
		            StockReportSchema srs = {<% for (my $j=0; $j<2**($power-$i); $j++) { %><% for (my $k=0; $k<2**($i-1); $k++) { %><% my $p=2*$pi*$k*2**($power-$i)/$size; my $a=2**$i*$j+$k; my $b=$a+2**($i-1); %>
		        		vr<%=$a%> = Output<%=$i-1%>.vr<%=$a%> + ((float64) <%=cos($p)%>) * Output<%=$i-1%>.vr<%=$b%> + ((float64) <%=sin($p)%>) * Output<%=$i-1%>.vi<%=$b%>,
						vi<%=$a%> = Output<%=$i-1%>.vi<%=$a%> - ((float64) <%=sin($p)%>) * Output<%=$i-1%>.vr<%=$b%> + ((float64) <%=cos($p)%>) * Output<%=$i-1%>.vi<%=$b%>,
		        		vr<%=$b%> = Output<%=$i-1%>.vr<%=$a%> - ((float64) <%=cos($p)%>) * Output<%=$i-1%>.vr<%=$b%> - ((float64) <%=sin($p)%>) * Output<%=$i-1%>.vi<%=$b%>,
						vi<%=$b%> = Output<%=$i-1%>.vi<%=$a%> + ((float64) <%=sin($p)%>) * Output<%=$i-1%>.vr<%=$b%> - ((float64) <%=cos($p)%>) * Output<%=$i-1%>.vi<%=$b%><% if ($b<$size-1) { %>,<% } %><% } %><% } %>
					};
		            submit(srs, Output<%=$i%>);
		        }
		}
		<% } %>
		() as FileWriter1 = FileSink(Output<%=$power%>) {
			param
			    file: "output.dat";
		}
}
